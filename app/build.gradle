/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3/userguide/building_java_projects.html
 */


// Includes proguard from parent directory for tasks
buildscript {
    repositories {
        flatDir dirs: '../../proguard-7.1.0-beta5/lib'
    }
    dependencies {
        classpath ':proguard:'
    }
}

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
    
}

apply plugin: 'java'
apply plugin: 'application'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

test {
    useJUnitPlatform()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    // This dependency is used by Apache Commons CSV 
    implementation 'org.checkerframework.annotatedlib:commons-csv:1.9.0'
}

application {
    // Define the main class for the application.
    mainClass = 'lab03.CSVDemo'
}

mainClassName = 'CSVDemo'

version = '1.0.0'

jar {
    manifest {
        attributes  'Main-Class': '$mainClassName',
                    'Implementation-Title':   'Sample',
                    'Implementation-Version': version
    }
}

// minify task
task(minify, dependsOn: 'jar', type: proguard.gradle.ProGuardTask) {
    configuration 'proguard.cfg'

    injars 'build/libs/CSVdemo-jar.jar'
    outjars 'build/libs/app.min.jar'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

sourceSets {
   main {
        java {
            srcDir 'lab03'
        }
    }
}
compileJava {
    options.incremental = true
    options.fork = true
    options.failOnError = false
}